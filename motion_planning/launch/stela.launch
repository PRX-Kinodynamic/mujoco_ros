<launch> 
  <arg name="visualize" default="true"/>
  <arg name="planner" default="Stela"/>
  <arg name="Stepper" default="Stela"/>
	<arg name="Plant" default="ltv_sde"/>
  <arg name="plant_file" default="$(find motion_planning)/config/$(arg Plant).yaml"/>
  <arg name="stela_file" default="$(find motion_planning)/config/stela.yaml"/>
  <arg name="debug_prefix" default=""/> 
  <arg name="rosbag_file" default=""/>
  <!-- <arg name="environment" default="environments/empty.yaml"/> -->
  <!-- <arg name="environment" default="environments/simple_obstacle.yaml"/> -->
  <arg name="environment" default="environments/forest.yaml"/>
  <!-- <arg name="environment" default="environments/prx_lab.yaml"/> -->
  <!-- <arg name="environment" default="environments/prx_lab_2.yaml"/> -->
  <!-- <arg name="environment" default="environments/obstacle_0.yaml"/> -->
  <!-- <arg name="environment" default="environments/bug_trap.yaml"/> -->
  <!-- <arg name="environment" default="environments/warehouse.yaml"/> -->
  <!-- <arg name="data_dir" default="$(env ML4KP_ROS)/data/stela/ltvsde/forest/no-noise"/> -->
  <!-- <arg name="data_dir" default="$(env ML4KP_ROS)/data/stela/ltvsde/forest/open-loop/no-noise"/> -->
  <arg name="data_dir" default="$(env ML4KP_ROS)/data/test"/>
  <!-- <arg name="data_dir" default="$(env ML4KP_ROS)/data/tunning"/> -->
  <arg name="simulation_step" default="0.1"/>
  <arg name="collect_data" default="true"/>
  <arg name="sim_clock" default="false"/>
  <arg name="random_seed" default="390489"/>
  <arg name="experiment_name" default="test"/>
  <arg name="obstacle_mode" default="None"/>
  <arg name="obstacle_distance_tolerance" default="1.0"/>
  <arg name="obstacle_factor_include_distance" default="1.0"/>
  <arg name="obstacle_sigma" default="1.0"/>
  <arg name="world_frame" default="world"/>
  <arg name="robot_frame" default="robot"/>
  <arg name="plan_topic" value="/stela/sbmp/plan"/> 
  <arg name="reset_topic" default="/stela/reset"/>
  <arg name="trajectory_topic" default="/stela/sbmp/trajectory"/>
  <arg name="control_topic" default="/stela/sbmp/control"/> 
  <arg name="state_topic" default="/stela/sbmp/state"/>
  <arg name="collision_topic" default="/simulator/collision"/>
  <arg name="stop_topic" default="/stela/stop"/>          <!-- Signal to stop -->
  <arg name="shutdown_topic" default="/stela/shutdown"/>  <!-- Shutdown NOW -->
  <arg name="mujoco" default="false" />
  <arg name="tf_noise_sigmas" default="[0.0, 0.0, 0.0]"/>
  <arg name="parameter_values" default="[0,0,0,0,0,0,0,0]"/>
  <arg name="experiment_id" default="test"/>
  <arg name="num_workers" default="8"/>
  <arg name="feedback_lookahead" default="3"/>
  <arg name="stela_time_based" default="true"/>


  <param name="model_path" type="string" value="$(find prx_models)/models/mushr/mushr.xml"/>

  <group ns="stela">

  	<node if="$(eval arg('planner') == 'Dirt-dbg')" 
      pkg="motion_planning" type="mp_nodelet_debugging" 
      name="mp_nodelet_debugging_viz" output="screen" 
      launch-prefix="lldb --">
      <param name="node_name" value="DirtPublisher"/>
      <param name="planner_ml4kp_params" value="$(find motion_planning)/config/dirt.yaml"/>
      <param name="plant_ml4kp_params" value="$(arg plant_file)"/>
      <param name="stela_params" value="$(arg stela_file)"/>
      <param name="environment" value="$(arg environment)"/>
    </node>

    <node if="$(eval arg('planner') == 'AORRT-dbg')" 
      pkg="motion_planning" type="mp_nodelet_debugging" name="mp_nodelet_debugging_viz" output="screen" 
launch-prefix="gdb --args">
      <param name="node_name" value="AORRTPublisher"/>
      <param name="planner_ml4kp_params" value="$(find motion_planning)/config/aorrt.yaml"/>
      <param name="plant_ml4kp_params" value="$(arg plant_file)"/>
      <param name="stela_params" value="$(arg stela_file)"/>
      <param name="environment" value="$(arg environment)"/>
      <param name="random_seed" value="$(arg random_seed)"/>
    </node>

   	<node pkg="nodelet" type="nodelet" name="stela_nodelet_manager"  args="manager" output="screen">
      <param name="num_worker_threads" value="$(arg num_workers)" />
    </node>

    <node if="$(eval arg('planner') == 'RRT')" 
      pkg="nodelet" type="nodelet" name="RRTPublisher" 
      args="load motion_planning/RRTPublisher stela_nodelet_manager" output="screen">
      <param name="planner_ml4kp_params" value="$(find motion_planning)/config/rrt.yaml"/>
      <param name="plant_ml4kp_params" value="$(arg plant_file)"/>
      <param name="stela_params" value="$(arg stela_file)"/>
      <param name="environment" value="$(arg environment)"/>
    </node>

    <node if="$(eval arg('planner') == 'Dirt')" 
      pkg="nodelet" type="nodelet" name="DirtPublisher" 
    	args="load motion_planning/DirtPublisher stela_nodelet_manager" output="screen">
      <param name="planner_ml4kp_params" value="$(find motion_planning)/config/dirt.yaml"/>
      <param name="plant_ml4kp_params" value="$(arg plant_file)"/>
      <param name="stela_params" value="$(arg stela_file)"/>
      <param name="environment" value="$(arg environment)"/>
    </node>

    <node if="$(eval arg('planner') == 'AORRT')" 
      pkg="nodelet" type="nodelet" name="AORRTPublisher" 
      args="load motion_planning/AORRTPublisher stela_nodelet_manager" output="screen">
      <param name="planner_ml4kp_params" value="$(find motion_planning)/config/aorrt.yaml"/>
      <param name="plant_ml4kp_params" value="$(arg plant_file)"/>
      <param name="stela_params" value="$(arg stela_file)"/>
      <param name="environment" value="$(arg environment)"/>
      <param name="random_seed" value="$(arg random_seed)"/>
    </node>

    <node if="$(eval arg('planner') == 'OpenLoop' or arg('planner') == 'Feedback')" 
      pkg="nodelet" type="nodelet" name="BranchSelector" 
      args="load motion_planning/BranchSelector stela_nodelet_manager" output="screen">
      <param name="random_seed" value="$(arg random_seed)"/>
      <param name="plan_topic_name" value="$(arg plan_topic)"/>
      <param name="traj_topic_name" value="$(arg trajectory_topic)"/>
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="shutdown_topic" value="$(arg shutdown_topic)"/>
      <param name="output_dir" value="$(arg data_dir)"/>
      <param name="experiment_id" value="$(arg experiment_id)"/>
    </node>

    <node if="$(eval arg('planner') == 'Feedback')" 
            pkg="nodelet" type="nodelet" name="ltv_sde_feedback" 
            args="load motion_planning/LtvPositionController stela_nodelet_manager" 
            output="screen">
      <param name="world_frame" value="world"/>
      <param name="robot_frame" value="robot"/>
      <param name="traj_topic_name" value="$(arg trajectory_topic)"/>
      <param name="control_topic" value="$(arg control_topic)"/>
      <param name="lookahead" value="$(arg feedback_lookahead)"/>
      <param name="frequency" value="30"/>
    </node> 

    <node if="$(eval arg('planner') == 'OpenLoop' and  arg('Plant') == 'mushr')" 
            pkg="nodelet" type="nodelet" name="mushr_traj_estimation" 
            args="load motion_planning/MushrTrajectoryEstimation stela_nodelet_manager" 
            output="screen">
      <param name="control_topic" value="$(arg control_topic)"/>
      <param name="world_frame" value="$(arg world_frame)"/>
      <param name="robot_frame" value="$(arg robot_frame)"/>
      <param name="output_dir" value="$(arg data_dir)"/>
      <param name="collision_topic" value="$(arg collision_topic)"/>
      <param name="environment" value="$(arg environment)"/>
      <param name="z_frequency" value="30"/>
      <param name="experiment_id" value="$(arg experiment_id)"/>
    </node> 

    <node if="$(eval arg('planner') == 'OpenLoop')" 
            pkg="nodelet" type="nodelet" name="plan_stepper_t" 
            args="load ml4kp_bridge/plan_stepper_t stela_nodelet_manager" 
            output="screen">
      <param name="subscriber_topic" value="$(arg plan_topic)"/>
      <param name="publisher_topic" value="$(arg control_topic)"/>
      <param name="frequency" value="30" />
      <param name="use_stamped_control" value="true"/>
      <param name="finished_topic" value="$(arg stop_topic)"/>
    </node> 

    <node if="$(eval arg('planner') == 'Stela' and  arg('Plant') == 'ltv_sde')" 
      pkg="nodelet" type="nodelet" name="StelaLtvSde" 
      args="load motion_planning/StelaLtvSde stela_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="control_topic" value="$(arg control_topic)"/> 
      <param name="control_frequency" value="30"/>
      <param name="world_frame" value="world"/>
      <param name="robot_frame" value="robot"/>
      <param name="output_dir" value="$(arg data_dir)"/>
      <param name="collision_topic" value="$(arg collision_topic)"/>
      <param name="environment" value="$(arg environment)"/>
      <param name="obstacle_mode" value="$(arg obstacle_mode)"/>
      <param name="obstacle_distance_tolerance" value="$(arg obstacle_distance_tolerance)"/>
      <param name="obstacle_factor_include_distance" value="$(arg obstacle_factor_include_distance)"/>
      <param name="obstacle_sigma" value="$(arg obstacle_sigma)"/>
      <param name="experiment_id" value="$(arg experiment_id)"/>
      <param name="time_based" value="$(arg stela_time_based)"/>
    </node> 

    <node if="$(eval arg('planner') == 'Stela' and  arg('Plant') == 'mushr')" 
      pkg="nodelet" type="nodelet" name="StelaMushr" 
      args="load motion_planning/StelaMushr stela_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="control_topic" value="$(arg control_topic)"/> 
      <param name="control_frequency" value="30"/>
      <param name="world_frame" value="$(arg world_frame)"/>
      <param name="robot_frame" value="$(arg robot_frame)"/>
      <param name="output_dir" value="$(arg data_dir)"/>
      <param name="collision_topic" value="$(arg collision_topic)"/>
      <param name="environment" value="$(arg environment)"/>
      <param name="obstacle_mode" value="$(arg obstacle_mode)"/>
      <param name="obstacle_distance_tolerance" value="$(arg obstacle_distance_tolerance)"/>
      <param name="obstacle_factor_include_distance" value="$(arg obstacle_factor_include_distance)"/>
      <param name="obstacle_sigma" value="$(arg obstacle_sigma)"/>
      <param name="experiment_id" value="$(arg experiment_id)"/>
      <param name="time_based" value="$(arg stela_time_based)"/>
    </node> 

    <node if="$(eval arg('planner') == 'StelaDbg')" 
      pkg="motion_planning" type="mp_nodelet_debugging" 
      name="StelaLtvSde" output="screen" 
      launch-prefix="lldb &#45;&#45;"
      >
      <param name="node_name" value="Stela"/>
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="control_topic" value="$(arg control_topic)"/> 
      <param name="control_frequency" value="30"/>
      <param name="world_frame" value="world"/>
      <param name="robot_frame" value="robot"/>
      <param name="output_dir" value="$(arg data_dir)"/>
      <param name="collision_topic" value="$(arg collision_topic)"/>
      <param name="environment" value="$(arg environment)"/>
      <param name="obstacle_mode" value="$(arg obstacle_mode)"/>
      <param name="obstacle_distance_tolerance" value="$(arg obstacle_distance_tolerance)"/>
      <param name="obstacle_sigma" value="$(arg obstacle_sigma)"/>
      <param name="obstacle_factor_include_distance" value="$(arg obstacle_factor_include_distance)"/>
      <param name="experiment_id" value="$(arg experiment_id)"/>
      <param name="time_based" value="$(arg stela_time_based)"/>
    </node>

    <node if="$(eval arg('Stepper') == 'Stela')" 
      pkg="nodelet" type="nodelet" name="StelaStepper" 
      args="load motion_planning/StelaStepper stela_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="action_topic" value="/stela/StelaLtvSde/action"/> 
      <param name="lookahead_duration" value="15"/> 
      <param name="cost_threashold" value="10000"/> 
      <param name="node_name" value="StelaStepper"/> 
      <param name="branch_selection" value="min_cost"/> 
      <param name="random_seed" value="$(arg random_seed)"/>
      <param name="plan_topic_name" value="$(arg plan_topic)"/>
    </node>

    <node if="$(eval arg('Stepper') == 'StelaDbg')" 
      pkg="motion_planning" type="mp_nodelet_debugging" 
      name="StelaStepperDbg" output="screen" 
      launch-prefix="xterm -e lldb --">
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="action_topic" value="/stela/StelaLtvSde/action"/> 
      <param name="lookahead_duration" value="15"/> 
      <param name="cost_threashold" value="10000"/> 
      <param name="node_name" value="StelaStepper"/> 
      <param name="branch_selection" value="min_cost"/> 
      <!-- <param name="branch_selection" value="random"/>  -->
      <param name="random_seed" value="$(arg random_seed)"/>
    </node>
    

  </group>

  <group ns="simulator">
    
    <include if="$(eval arg('Plant') == 'ltv_sde' or arg('Plant') == 'mushr' )" 
             file="$(find analytical)/launch/simulator.launch" >
      <arg name="ns" value="stela"/>
      <arg name="plant_file" value="$(arg plant_file)"/>
      <arg name="environment" value="$(arg environment)"/>
      <arg name="plan_topic" value="$(arg plan_topic)"/> 
      <arg name="control_topic" default="$(arg control_topic)"/> 
      <arg name="simulation_step" value="$(arg simulation_step)"/>
      <arg name="sim_clock" default="$(arg sim_clock)"/>
      <arg name="planner" value="$(arg planner)"/>
      <arg name="collision_topic" value="$(arg collision_topic)"/>
      <arg name="state_topic" value="$(arg state_topic)"/>
      <arg name="tf_noise_sigmas" value="$(arg tf_noise_sigmas)"/>  
      <arg name="parameter_values" value="$(arg parameter_values)"/>  
      <arg name="shutdown_topic" default="$(arg shutdown_topic)"/>
      <arg name="num_workers" default="$(arg num_workers)"/>
    </include>

    <!-- <include if="$(eval arg('Plant') == 'mushr' and arg('mujoco'))" 
             file="$(find mujoco_ros)/launch/mushr.launch" 
            >
      <arg name="visualize" default="$(arg visualize)"/>
      <arg name="control_topic" default="$(arg control_topic)"/> 
    </include> -->

    <node pkg="tf2_ros" type="static_transform_publisher" name="tf_world" 
        args="0 0 0 0 0 0 1 world map" />
  </group>
  
  <group ns="utils">
    <node pkg="nodelet" type="nodelet" name="to_file_nodelet_manager"  args="manager" output="screen">
      <param name="num_worker_threads" value="$(arg num_workers)" />
    </node>

    <node pkg="nodelet" type="nodelet" name="plan_from_file_t" output="screen"
          args="load ml4kp_bridge/plan_from_file_t to_file_nodelet_manager" >
      <param name="control_dimension" value="2" />
      <param name="control_topology" value="EE" />
      <param name="publisher_topic" value="$(arg plan_topic)" />
    </node>

    <node 
      pkg="nodelet" type="nodelet" name="BoolSinker" output="screen"
      args="load utils/BoolSinker to_file_nodelet_manager" >
      <param name="out_topic" value="$(arg shutdown_topic)"/>
      <param name="in_topics" type="yaml" value="[$(arg collision_topic), $(arg stop_topic), /stela/finished]"/>
    </node>

    <node if="$(arg sim_clock)" 
      pkg="utils" type="SimClock" name="SimClock" output="screen">
      <param name="SimStep" value="$(arg simulation_step)"/>
      <param name="fileprefix" value="desired_trajectories"/>
      <param name="topic_name" value="$(arg trajectory_topic)"/>
      <param name="realtime_factor" value="1.0"/>
    </node>

    <node if="$(arg collect_data)" 
      pkg="utils" type="tf_to_file" name="tf_to_file" output="screen">
      <param name="directory" value="$(arg data_dir)"/>
      <param name="fileprefix" value="tf_$(arg experiment_id)"/>
      <rosparam command="load" file="$(find utils)/config/frames.yaml" />
      <!-- <param name="transforms" value="$(find utils)/config/frames.yaml"/> -->
      <param name="reset_topic" value="$(arg reset_topic)"/>
      <param name="window_duration" value="0"/>
      <param name="stop_topic" value="$(arg shutdown_topic)"/>
    </node>


    <node if="$(arg collect_data)" 
      pkg="nodelet" type="nodelet" name="TrajectoryToFile" output="screen"
      args="load utils/TrajectoryToFile to_file_nodelet_manager" >
      <param name="directory" value="$(arg data_dir)"/>
      <param name="fileprefix" value="desired_trajectories_$(arg experiment_id)"/>
      <param name="topic_name" value="$(arg trajectory_topic)"/>
      <param name="reset_topic" value="$(arg reset_topic)"/>
      <param name="shutdown_topic" value="$(arg shutdown_topic)"/>
    </node>

    <node if="$(arg collect_data)" 
      pkg="nodelet" type="nodelet" name="PlanStampedToFile" output="screen"
      args="load utils/PlanStampedToFile to_file_nodelet_manager" >
      <param name="directory" value="$(arg data_dir)"/>
      <param name="fileprefix" value="desired_plan_$(arg experiment_id)"/>
      <param name="topic_name" value="$(arg plan_topic)"/>
      <param name="reset_topic" value="$(arg reset_topic)"/>
      <param name="shutdown_topic" value="$(arg shutdown_topic)"/>
    </node>

    <node if="$(arg collect_data)" 
      pkg="nodelet" type="nodelet" name="ControlToFile" output="screen"
      args="load utils/StateStampedToFile to_file_nodelet_manager" >
      <param name="directory" value="$(arg data_dir)"/>
      <param name="fileprefix" value="executed_control_$(arg experiment_id)"/>
      <param name="topic_name" value="$(arg control_topic)_stamped"/>
      <param name="reset_topic" value="$(arg reset_topic)"/>
      <param name="shutdown_topic" value="$(arg shutdown_topic)"/>
    </node>


    <node if="$(arg collect_data)" 
      pkg="nodelet" type="nodelet" name="CollisionToFile" output="screen"
      args="standalone utils/CollisionToFile collision_nodelet_manager" >
      <param name="directory" value="$(arg data_dir)"/>
      <param name="fileprefix" value="collision_$(arg experiment_id)"/>
      <param name="topic_name" value="$(arg collision_topic)"/>
      <param name="reset_topic" value="$(arg reset_topic)"/>
      <param name="shutdown_topic" value="$(arg shutdown_topic)"/>
    </node>

  </group>

  <group ns="viz">
    <node pkg="nodelet" type="nodelet" name="viz_nodelet_manager"  args="manager" output="screen">
      <param name="num_worker_threads" value="$(arg num_workers)" />
    </node>

    <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="MotionPlanningTreeVizPublisher" 
      args="load motion_planning/MotionPlanningTreeVizPublisher viz_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/sbmp/tree"/>
      <param name="color" type="yaml" value="[1.0, 1.0, 0.0, 0.0]"/>
    </node>
 
    <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="SlnMotionPlanningTreeVizPublisher" 
      args="load motion_planning/MotionPlanningTreeVizPublisher viz_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/sbmp/sln_tree"/>
      <param name="color" type="yaml" value="[1.0, 0.0, 1.0, 0.0]"/>
    </node> 

    <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="EnvironmentPublisher" 
      args="load utils/EnvironmentPublisher viz_nodelet_manager" output="screen">
      <param name="color" type="yaml" value="[1.0, 1.0, 0.0, 0.0]"/>
      <param name="environment_file" value="$(arg environment)"/>
    </node>

     <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="TrajectoryVizPublisher" 
      args="load utils/TrajectoryVizPublisher viz_nodelet_manager" output="screen">
      <param name="traj_topic_name" value="$(arg trajectory_topic)"/>
      <param name="color" type="yaml" value="[1.0, 1.0, 1.0, 0.0]"/>
    </node>

    <!-- <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="PlanToTrajectoryPublisher" 
      args="load utils/PlanToTrajectoryPublisher viz_nodelet_manager" output="screen">
      <param name="plan_topic_name" value="$(arg plan_topic)"/>
      <param name="traj_topic_name" value="/stela/sbmp/traj_gt"/>
      <param name="plant_ml4kp_params" value="$(arg plant_file)"/>
    </node> -->

    <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="TrajectoryVizPublisherGT" 
      args="load utils/TrajectoryVizPublisher viz_nodelet_manager" output="screen">
      <param name="traj_topic_name" value="/stela/sbmp/traj_gt"/>
      <param name="color" type="yaml" value="[1.0, 0.0, 0.0, 1.0]"/>
    </node>

    <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="GraphVizPublisher" 
      args="load utils/GraphVizPublisher viz_nodelet_manager" output="screen">
      <param name="graph_topic_name" value="/stela/manual/graph"/>
      <param name="color" type="yaml" value="[1.0, 0.0, 1.0, 0.0]"/>
    </node>

   <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="StelaLocalTreeVizPublisher" 
      args="load motion_planning/MotionPlanningTreeVizPublisher viz_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/lookahead"/>
      <param name="color" type="yaml" value="[1.0, 1.0, 1.0, 1.0]"/>
    </node>  

    <node if="$(eval arg('visualize') and arg('Plant') == 'ltv_sde')" 
      pkg="nodelet" type="nodelet" name="ControlVizPublisher" 
      args="load interface/ControlVisualizationNodelet viz_nodelet_manager" output="screen">
      <param name="world_frame" value="$(arg world_frame)"/>
      <param name="robot_frame" value="$(arg robot_frame)"/>
      <param name="control_topic_name" value="$(arg control_topic)"/>
      <param name="color" type="yaml" value="[.50, 1.0, 1.0, 1.0]"/>
    </node>   

     <node if="$(eval arg('visualize') and arg('Plant') == 'mushr')" 
      pkg="nodelet" type="nodelet" name="MushrControlVisualizationNodelet" 
      args="load interface/MushrControlVisualizationNodelet viz_nodelet_manager" output="screen">
      <param name="world_frame" value="$(arg world_frame)"/>
      <param name="robot_frame" value="$(arg robot_frame)"/>
      <param name="control_topic_name" value="$(arg control_topic)"/>
      <param name="color" type="yaml" value="[.50, 1.0, 1.0, 1.0]"/>
    </node>   


<!--     <node if="$(arg visualize)" 
      pkg="nodelet" type="nodelet" name="StelaLocalTreeVizPublisher" 
      args="load motion_planning/MotionPlanningTreeVizPublisher viz_nodelet_manager" output="screen">
      <param name="tree_topic_name" value="/stela/lookahead"/>
      <param name="color" type="yaml" value="[1.0, 1.0, 1.0, 1.0]"/>
    </node>  -->

  </group>
</launch>
